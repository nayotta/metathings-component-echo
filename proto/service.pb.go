// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package ai_metathings_component_service_echo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Text                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetText() *wrappers.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

type EchoResponse struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "ai.metathings.component.service.echo.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "ai.metathings.component.service.echo.EchoResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x90, 0xb1, 0x4a, 0xc5, 0x30,
	0x14, 0x86, 0x0d, 0x5c, 0x04, 0x73, 0xbd, 0x4b, 0x26, 0xb9, 0x88, 0x48, 0x70, 0xb8, 0xd3, 0x69,
	0xad, 0x0f, 0xe0, 0xe4, 0x0b, 0xb4, 0xe0, 0x9e, 0x86, 0x63, 0x1a, 0x68, 0x73, 0x62, 0x72, 0xaa,
	0x0e, 0x3e, 0xba, 0x83, 0xd8, 0x50, 0xe8, 0xa8, 0x8b, 0x63, 0xe0, 0xff, 0xfe, 0xff, 0xcb, 0x91,
	0x87, 0x8c, 0xe9, 0xcd, 0x5b, 0x84, 0x98, 0x88, 0x49, 0xdd, 0x19, 0x0f, 0x13, 0xb2, 0xe1, 0xc1,
	0x07, 0x97, 0xc1, 0xd2, 0x14, 0x29, 0x60, 0x60, 0x58, 0x63, 0x68, 0x07, 0x3a, 0xde, 0x38, 0x22,
	0x37, 0x62, 0xb5, 0x30, 0xfd, 0xfc, 0x52, 0xbd, 0x27, 0x13, 0x23, 0xa6, 0x5c, 0x5a, 0xf4, 0xa3,
	0xdc, 0x3f, 0xd9, 0x81, 0x5a, 0x7c, 0x9d, 0x31, 0xb3, 0xaa, 0xe5, 0x8e, 0xf1, 0x83, 0xaf, 0xc4,
	0xad, 0x38, 0xed, 0x9b, 0x6b, 0x28, 0x34, 0xac, 0x34, 0x74, 0x9c, 0x7c, 0x70, 0xcf, 0x66, 0x9c,
	0xb1, 0x5d, 0x92, 0x5a, 0xcb, 0xcb, 0x52, 0x90, 0x23, 0x85, 0x8c, 0x4a, 0x6d, 0x1a, 0x2e, 0x4a,
	0xa6, 0xf9, 0x12, 0x65, 0xa5, 0x2b, 0x66, 0x8a, 0xe4, 0xee, 0xe7, 0xa9, 0xee, 0xe1, 0x37, 0x7f,
	0x80, 0x8d, 0xe0, 0xb1, 0xf9, 0x0b, 0x52, 0x94, 0xf4, 0x99, 0xfa, 0x94, 0x87, 0x8e, 0x13, 0x9a,
	0xc9, 0x07, 0xf7, 0xaf, 0xcb, 0x27, 0x51, 0x8b, 0xfe, 0x7c, 0x39, 0xdf, 0xc3, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0xfe, 0x8f, 0x85, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	StreamingEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_StreamingEchoClient, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/ai.metathings.component.service.echo.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) StreamingEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_StreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoService_serviceDesc.Streams[0], "/ai.metathings.component.service.echo.EchoService/StreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceStreamingEchoClient{stream}
	return x, nil
}

type EchoService_StreamingEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceStreamingEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceStreamingEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	StreamingEcho(EchoService_StreamingEchoServer) error
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.component.service.echo.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_StreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).StreamingEcho(&echoServiceStreamingEchoServer{stream})
}

type EchoService_StreamingEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceStreamingEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceStreamingEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.component.service.echo.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingEcho",
			Handler:       _EchoService_StreamingEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
